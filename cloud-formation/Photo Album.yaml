AWSTemplateFormatVersion: 2010-09-09
Description: Photo Album
Parameters:
  FrontendToken:
    Type: String

  BackendToken:
    Type: String

Resources:
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: AI Photo Search application, built during the Cloud and Big Data course at Columbia University.
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: AI Photo CF
      BinaryMediaTypes:
        - "image/jpeg"
      Body: 
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at Columbia University."
          version: "1.0.0"
          title: "AI Photo Search"

  APISearchResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: search
      RestApiId: !Ref APIGateway

  APISearchResourceGetMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      HttpMethod: GET
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APISearchResource
      AuthorizationType: NONE
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.querystring.q: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses: 
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ContentHandling: "CONVERT_TO_TEXT"
            StatusCode: 200
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSearchPhotos.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true

  APISearchResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: NONE
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APISearchResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt  LambdaSearchPhotos.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/*/*

  APIUploadResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: upload
      RestApiId: !Ref APIGateway

  APIUploadObjectResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref APIUploadResource
      RestApiId: !Ref APIGateway
      PathPart: '{object}'

  APIUploadObjectResourcePutMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      HttpMethod: PUT
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIUploadObjectResource
      AuthorizationType: NONE
      RequestValidatorId: !Ref RequestValidator
      RequestParameters:
        method.request.path.object: true
        method.request.header.Content-Type: true
        method.request.header.x-amz-meta-customLabels: false
      Integration:
        Type: AWS
        Credentials: "arn:aws:iam::814655805539:role/apigateway"
        PassthroughBehavior: WHEN_NO_MATCH
        ContentHandling: "CONVERT_TO_BINARY"
        IntegrationHttpMethod: PUT
        IntegrationResponses: 
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        RequestParameters:
          integration.request.path.object: "method.request.path.object"
          integration.request.header.x-amz-meta-customLabels: "method.request.header.x-amz-meta-customLabels"
          integration.request.header.Content-Type: "method.request.header.Content-Type"
        Uri: !Sub arn:aws:apigateway:us-east-1:s3:path/${S3Photos}/{object}
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true

  APIUploadObjectResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: NONE
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIUploadObjectResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customLabels'"
            method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - APIUploadObjectResourcePutMethod
      - APIUploadObjectResourceOptionsMethod
      - APISearchResourceOptionsMethod
      - APISearchResourceGetMethod
    Properties:
      RestApiId: !Ref APIGateway
      Description: Production deployment
      StageName: prod

  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref APIGateway
      ValidateRequestParameters: true

  Elasticsearch:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: "photosearch"
      EngineVersion: "OpenSearch_1.3"
      ClusterConfig:
        InstanceType: "t3.small.search"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: true
        KmsKeyId: 57fa97bf-b53d-4d8b-8809-c5852fb3a409
      NodeToNodeEncryptionOptions: 
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: maxee998
          MasterUserPassword: Admin1234!
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Sub arn:aws:es:us-east-1:${AWS::AccountId}:domain/photosearch/*

  S3FrontendPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: PublicWebsitePolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Frontend
                - /*
      Bucket: !Ref S3Frontend

  S3Frontend:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: PublicRead
      BucketName: photo-album-frontend-cf
      WebsiteConfiguration:
        IndexDocument: index.html

  S3Photos:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - ProcessingLambdaPermission
    Properties:
      BucketName: photos-cf
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaIndexPhotos.Arn
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: .jpg
  
  S3PhotosPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref S3Photos
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3Photos
                - /*
            Principal: '*'

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaIndexPhotos
      Principal: s3.amazonaws.com
      SourceArn: arn:aws:s3:::photos-cf
      SourceAccount: !Ref AWS::AccountId

  LambdaRuntimeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  LambdaSearchPhotos:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables: 
          openSearchHost: !GetAtt Elasticsearch.DomainEndpoint
          lexBotID: !GetAtt LexBot.Id
          botAliasId: !GetAtt LexBotAlias.BotAliasId
      Code:
        S3Bucket: code-hongyi
        S3Key: search-photos-cf.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Description: ""
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt LambdaRuntimeRole.Arn

  LambdaIndexPhotos:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables: 
          openSearchHost: !GetAtt Elasticsearch.DomainEndpoint
          photoBucket: photos-cf
      Code:
        S3Bucket: code-hongyi
        S3Key: index-photos-cf.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Description: ""
      MemorySize: 128
      Timeout: 3
      Role: !GetAtt LambdaRuntimeRole.Arn

  LambdaCreateIndex:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables: 
          openSearchHost: !GetAtt Elasticsearch.DomainEndpoint
          lexBotID: !GetAtt LexBot.Id
      Code:
        S3Bucket: code-hongyi
        S3Key: create-index-cf.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Description: ""
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt LambdaRuntimeRole.Arn

  CreateIndexInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaCreateIndex.Arn

  LexBot:
    DependsOn: BotRuntimeRole
    Type: AWS::Lex::Bot
    Properties:
      IdleSessionTTLInSeconds: 300
      Name: "searchPhotoCF"
      RoleArn: !GetAtt BotRuntimeRole.Arn
      DataPrivacy:
        ChildDirected: false
      BotFileS3Location:
        S3Bucket: code-hongyi
        S3ObjectKey: SearchPhotos-DRAFT-GHPLJQNTLA-LexJson.zip

  LexBotVersion:
    Type: AWS::Lex::BotVersion
    Properties: 
      BotId: !Ref LexBot
      BotVersionLocaleSpecification: 
        - BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
          LocaleId: en_US
      Description: Production Version

  LexBotAlias:
    Type: AWS::Lex::BotAlias
    Properties: 
      BotAliasName: prod
      BotId: !Ref LexBot
      BotVersion: !GetAtt LexBotVersion.BotVersion
      Description: Production Alias

  BotRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lexv2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"

  CodeBuildFEAssetsBucket:
    Type: AWS::S3::Bucket

  CodeBuildFEServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: client-code-build-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource:
                  - !Sub arn:aws:s3:::${CodeBuildFEAssetsBucket}/*
                  - !Sub arn:aws:s3:::${S3Frontend}/*
                  - !Sub arn:aws:s3:::${S3Frontend}
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:ListObjects

  CodeBuildFEProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                - echo 'const APIGatewayID = "${APIGateway}"' > id.js
            post_build:
              commands:
                - echo "DONE!!"
          artifacts:
            files:
              - "**/*"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: PUBLIC_URL
            Value: '/'
      Name: !Sub ${AWS::StackName}-build-client
      ServiceRole: !Ref CodeBuildFEServiceRole

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: code-pipeline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${S3Frontend}/*
                  - !Sub arn:aws:s3:::${S3Frontend}
                  - !Sub arn:aws:s3:::${CodeBuildFEAssetsBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:ListObjects
              - Resource:
                  - arn:aws:s3:::*
                Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: "*"
                Effect: Allow
                Action:
                  - lambda:*

  CodePipelineFrontend:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: photo-album-frontend-pipeline-cf-test
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodeBuildFEAssetsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: MAXEE998
                Repo: cloud-computing-assignment2-frontend
                Branch: main
                OAuthToken: !Ref FrontendToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: ClientBuildStep
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildFEProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: ClientBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ClientDeployStep
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                BucketName: !Ref S3Frontend
                Extract: true
              InputArtifacts:
                - Name: ClientBuild
              OutputArtifacts: []
              Region: us-east-1
              RunOrder: 1

  CodePipeLineFEWebhook: 
    Type: 'AWS::CodePipeline::Webhook' 
    Properties:
      AuthenticationConfiguration: 
        SecretToken: !Ref FrontendToken
      Filters: 
      - JsonPath: "$.ref" 
        MatchEquals: refs/heads/main
      Authentication: GITHUB_HMAC 
      TargetPipeline: !Ref CodePipelineFrontend
      TargetAction: App 
      Name: FrontendWebhook 
      TargetPipelineVersion: !GetAtt CodePipelineFrontend.Version
      RegisterWithThirdParty: 'true'

  CodeBuildBEServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: backend-codebuild
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/codebuild/codebuild-backend-cf
                  - !Sub arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/codebuild/codebuild-backend-cf:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:RemovePermission
                  - lambda:CreateAlias
                  - lambda:UpdateAlias
                  - lambda:DeleteAlias
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                  - lambda:PutFunctionConcurrency
                  - lambda:DeleteFunctionConcurrency
                  - lambda:PublishVersion
                Resource: 
                - !Sub arn:aws:lambda:us-east-1:${AWS::AccountId}:function:*
              - Effect: Allow
                Resource:
                  - arn:aws:s3:::codepipeline-us-east-1-*
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource:
                  - !Sub arn:aws:codebuild:us-east-1:${AWS::AccountId}:report-group/*

  CodeBuildBackend:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: codebuild-backend-cf
      Artifacts: 
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
      Source:
        Type: GITHUB
        Location: https://github.com/MAXEE998/photo-album
        Auth:
          Type: OAUTH
          Resource: !Ref BackendToken
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                - echo "Zipping deployment packages..."
                - cd create-index-cf/package
                - zip -r9 ../../create-index-cf.zip .
                - zip -9 ../../create-index-cf.zip ../lambda_function.py
                - cd ../../search-photos-cf/package
                - zip -r9 ../../search-photos-cf.zip .
                - zip -9 ../../search-photos-cf.zip ../lambda_function.py
                - cd ../../index-photos-cf/package
                - zip -r9 ../../index-photos-cf.zip .
                - zip -9 ../../index-photos-cf.zip ../lambda_function.py
                - cd ../..

            post_build:
              commands:
                - echo "Updating lambda Functions..."
                - aws lambda update-function-code --function-name ${LambdaSearchPhotos} --zip-file fileb://search-photos-cf.zip
                - aws lambda update-function-code --function-name ${LambdaIndexPhotos} --zip-file fileb://index-photos-cf.zip
                - aws lambda update-function-code --function-name ${LambdaCreateIndex} --zip-file fileb://create-index-cf.zip
                - echo "DONE!!"
      SourceVersion: main
      ServiceRole: !GetAtt CodeBuildBEServiceRole.Arn
      Triggers:
        BuildType: BUILD
        Webhook: true

Outputs:
  WebsiteURL:
    Description: URL for Website Hosted on S3
    Value: !GetAtt
      - S3Frontend
      - WebsiteURL
  OpenSearchDomainEndpoint:
    Description: OpenSearch domain
    Value: !GetAtt
      - Elasticsearch
      - DomainEndpoint
  OpenSearchDomainDashboard:
    Description: URL for OpenSearch dashboard
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - Elasticsearch
          - DomainEndpoint
        - '/_dashboards'
